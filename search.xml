<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Learning Plan</title>
      <link href="/2022/10/03/Learning-Plan/"/>
      <url>/2022/10/03/Learning-Plan/</url>
      
        <content type="html"><![CDATA[<h2 id="Planning-What-You-Wanna-Do"><a href="#Planning-What-You-Wanna-Do" class="headerlink" title="Planning What You Wanna Do"></a>Planning What You Wanna Do</h2><h3 id="Language-Learning"><a href="#Language-Learning" class="headerlink" title="Language Learning"></a>Language Learning</h3><p>1h – after 5h 1h reviwe</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>leetcode - 1h~2h</p><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><p>math - 1h<br>physical - 1h<br>linear algebra - 1h<br>probability theory - 1h</p><h3 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h3><p>book - 1h or 1&#x2F;2h</p>]]></content>
      
      
      <categories>
          
          <category> Essay Writing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Solve a Problem</title>
      <link href="/2022/09/30/How-to-Solve-a-Problem/"/>
      <url>/2022/09/30/How-to-Solve-a-Problem/</url>
      
        <content type="html"><![CDATA[<h2 id="How-to-solve-a-problems"><a href="#How-to-solve-a-problems" class="headerlink" title="How to solve a problems"></a>How to solve a problems</h2><p><a href="%E6%88%91%E6%80%9D%E6%95%85%E6%88%91%E5%9C%A8">cogito ergo sum</a></p><h3 id="THe-Question"><a href="#THe-Question" class="headerlink" title="THe Question"></a>THe Question</h3><p>what is question , think about it .</p><h3 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h3><p>Consider the boundary case<br>NULL nullptr [] etc.</p><h3 id="Using-function-amp-amp-struct"><a href="#Using-function-amp-amp-struct" class="headerlink" title="Using function &amp;&amp; struct"></a>Using function &amp;&amp; struct</h3><p>vector stack queue</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Essay Writing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinking </tag>
            
            <tag> efficient </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode75</title>
      <link href="/2022/09/30/LeetCode75/"/>
      <url>/2022/09/30/LeetCode75/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This study plan is for those who want to prepare for technical interviews but are uncertain which problems they should focus on. 、</p><h3 id="1480-Running-Sum-of-1d-Array"><a href="#1480-Running-Sum-of-1d-Array" class="headerlink" title="1480.Running Sum of 1d Array"></a>1480.Running Sum of 1d Array</h3><p>Input: nums &#x3D; [1,2,3,4]<br>Output: [1,3,6,10]<br>n[i+1] &#x3D; n[i]+n[i+1]</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vector<span class="token operator">&lt;</span>int<span class="token operator">></span> runningSum<span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>int<span class="token operator">>&amp;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n.size<span class="token punctuation">(</span><span class="token punctuation">)</span>-1 <span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            n<span class="token punctuation">[</span>i+1<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">[</span>i<span class="token punctuation">]</span>+n<span class="token punctuation">[</span>i+1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token builtin class-name">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="724-Find-Pivot-Index"><a href="#724-Find-Pivot-Index" class="headerlink" title="724. Find Pivot Index"></a>724. Find Pivot Index</h3><p>The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index’s right.</p><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// int pivotIndex<span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>int<span class="token operator">>&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>//         int n <span class="token operator">=</span> nums.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//         int left , right , mid<span class="token punctuation">;</span>//         left <span class="token operator">=</span> right <span class="token operator">=</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>//         while<span class="token punctuation">(</span>mid <span class="token operator">&lt;=</span> n-1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> //n - <span class="token number">1</span>//             if<span class="token punctuation">(</span>mid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>//                 left <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>//             <span class="token punctuation">&#125;</span>else<span class="token punctuation">&#123;</span>//                 for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mid <span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>//                     left <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>//                 <span class="token punctuation">&#125;</span>//             <span class="token punctuation">&#125;</span>//             if<span class="token punctuation">(</span>mid <span class="token operator">==</span> n - <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>//                 right <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>//             <span class="token punctuation">&#125;</span>else<span class="token punctuation">&#123;</span>//                 for<span class="token punctuation">(</span>int i <span class="token operator">=</span> n-1 <span class="token punctuation">;</span> i <span class="token operator">></span> mid <span class="token punctuation">;</span> i--<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>//                     right <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>//                 <span class="token punctuation">&#125;</span>//             <span class="token punctuation">&#125;</span>//             //if is equal//             if<span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>//                 <span class="token builtin class-name">break</span><span class="token punctuation">;</span>//             <span class="token punctuation">&#125;</span>//             mid ++<span class="token punctuation">;</span>//             left <span class="token operator">=</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>//         <span class="token punctuation">&#125;</span>//         if<span class="token punctuation">(</span>mid <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>//             <span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span>//         <span class="token punctuation">&#125;</span>//         <span class="token builtin class-name">return</span> mid<span class="token punctuation">;</span> // <span class="token function">time</span> limit O<span class="token punctuation">(</span>n^2<span class="token punctuation">)</span>        //     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int pivotIndex<span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>int<span class="token operator">>&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        int n <span class="token operator">=</span> nums.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        int left , right , mid<span class="token punctuation">;</span>        left <span class="token operator">=</span> right <span class="token operator">=</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            right <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        while<span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            if<span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            left <span class="token operator">+=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>            if<span class="token punctuation">(</span>mid+1 <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                right -<span class="token operator">=</span> nums<span class="token punctuation">[</span>mid+1<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            mid ++<span class="token punctuation">;</span>            // left <span class="token operator">+=</span> nums<span class="token punctuation">[</span>mid-1<span class="token punctuation">]</span><span class="token punctuation">;</span>            // right -<span class="token operator">=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        if<span class="token punctuation">(</span>mid <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token builtin class-name">return</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LeetCode Solution</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">class Solution <span class="token punctuation">&#123;</span>    public int pivotIndex<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        int <span class="token function">sum</span> <span class="token operator">=</span> <span class="token number">0</span>, leftsum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int x: nums<span class="token punctuation">)</span> <span class="token function">sum</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums.length<span class="token punctuation">;</span> ++i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leftsum <span class="token operator">==</span> <span class="token function">sum</span> - leftsum - nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> i<span class="token punctuation">;</span>            leftsum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="205-Isomorphic-Strings"><a href="#205-Isomorphic-Strings" class="headerlink" title="205. Isomorphic Strings"></a>205. Isomorphic Strings</h3><p>Given two strings s and t, determine if they are isomorphic.</p><p>Two strings s and t are isomorphic if the characters in s can be replaced to get t.</p><p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.</p><h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;     bool isIsomorphic(string s, string t) &#123;&#x2F;&#x2F;         int i_s, i_t;&#x2F;&#x2F;         i_s &#x3D; 0;&#x2F;&#x2F;         i_t &#x3D; 0;&#x2F;&#x2F;         if(s.size() &#x3D;&#x3D; 1 &amp;&amp; t.size() &#x3D;&#x3D; 1)&#123;&#x2F;&#x2F;             return true;&#x2F;&#x2F;         &#125;&#x2F;&#x2F;         for(int i &#x3D; 1; s[i] !&#x3D; &#39;\0&#39; &amp;&amp; t[i] !&#x3D; &#39;\0&#39;; i++)&#123;&#x2F;&#x2F;             if(s[i] &#x3D;&#x3D; s[i-1])&#123;&#x2F;&#x2F;                 i_s &#x3D; 0;&#x2F;&#x2F;             &#125;else&#123;&#x2F;&#x2F;                 i_s &#x3D; 1;&#x2F;&#x2F;             &#125;            &#x2F;&#x2F;             if(t[i] &#x3D;&#x3D; t[i-1])&#123;&#x2F;&#x2F;                 i_t &#x3D; 0;&#x2F;&#x2F;             &#125;else&#123;&#x2F;&#x2F;                 i_t &#x3D; 1;&#x2F;&#x2F;             &#125;&#x2F;&#x2F;             &#x2F;&#x2F; i_s &#x3D; s[i] - s[i-1];&#x2F;&#x2F;             &#x2F;&#x2F; i_t &#x3D; t[i] - t[i-1];            &#x2F;&#x2F;             if(i_s !&#x3D; i_t &#x2F;**or s[i] !&#x3D; t[i]*&#x2F;)&#123;&#x2F;&#x2F;                 return false;&#x2F;&#x2F;             &#125;&#x2F;&#x2F;         &#125;&#x2F;&#x2F;         return true;&#x2F;&#x2F;     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bool isIsomorphic<span class="token punctuation">(</span>string s, string t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        int map_s<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map_s<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                // map_t<span class="token punctuation">[</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                for<span class="token punctuation">(</span>auto t_ <span class="token builtin class-name">:</span> map_s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t_ <span class="token operator">==</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                map_s<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>map_s<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6 lines solution : grandyang</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bool isIsomorphic<span class="token punctuation">(</span>string s, string t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        int m1<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span>, m2<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span>, n <span class="token operator">=</span> s.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> ++i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m1<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> m2<span class="token punctuation">[</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            m1<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i + <span class="token number">1</span><span class="token punctuation">;</span>            m2<span class="token punctuation">[</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i + <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="392-Is-Subsequence"><a href="#392-Is-Subsequence" class="headerlink" title="392. Is Subsequence"></a>392. Is Subsequence</h3><p>A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., “ace” is a subsequence of “abcde” while “aec” is not).</p><h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bool isSubsequence<span class="token punctuation">(</span>string s, string t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      int i_t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      int i_s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      if<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i_s<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      while<span class="token punctuation">(</span>t<span class="token punctuation">[</span>i_t + <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        if<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i_s<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>i_t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          i_s ++<span class="token punctuation">;</span>          if<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i_s<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\0'</span> <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">[</span>i_t<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        i_t ++<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      //if<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i_s<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      // if<span class="token punctuation">(</span>t<span class="token punctuation">[</span>i_t<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      //   if<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i_s<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>i_t - <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      // <span class="token punctuation">&#125;</span>      if<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i_s<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>i_t<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i_s + <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>0ms 8.7mb : abhimanyuahuja</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">class Solution <span class="token punctuation">&#123;</span>public:    bool isSubsequence<span class="token punctuation">(</span>string s, string t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        int n <span class="token operator">=</span> s.length<span class="token punctuation">(</span><span class="token punctuation">)</span>,m<span class="token operator">=</span>t.length<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     // For index of s <span class="token punctuation">(</span>or subsequence     // Traverse s and t, and    // compare current character    // of s with first unmatched char    // of t, <span class="token keyword">if</span> matched    // <span class="token keyword">then</span> move ahead <span class="token keyword">in</span> s    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m and j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            j++<span class="token punctuation">;</span>     // If all characters of s were found <span class="token keyword">in</span> t    <span class="token builtin class-name">return</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2022.10.1</p><h3 id="21-Merge-Two-Sorted-Lists-need-reviwe"><a href="#21-Merge-Two-Sorted-Lists-need-reviwe" class="headerlink" title="21. Merge Two Sorted Lists(need reviwe)"></a>21. Merge Two Sorted Lists(need reviwe)</h3><p>Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.</p><p>Return the head of the merged linked list.</p><h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/** * Definition <span class="token keyword">for</span> singly-linked list. * struct ListNode <span class="token punctuation">&#123;</span> *     int val<span class="token punctuation">;</span> *     ListNode *next<span class="token punctuation">;</span> *     ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> val<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>, next<span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> *     ListNode<span class="token punctuation">(</span>int x<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> val<span class="token punctuation">(</span>x<span class="token punctuation">)</span>, next<span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> *     ListNode<span class="token punctuation">(</span>int x, ListNode *next<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> val<span class="token punctuation">(</span>x<span class="token punctuation">)</span>, next<span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> * <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> */class Solution <span class="token punctuation">&#123;</span>public:    ListNode* mergeTwoLists<span class="token punctuation">(</span>ListNode* l1, ListNode* l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      if<span class="token punctuation">(</span>l1 <span class="token operator">==</span> NULL<span class="token punctuation">)</span> <span class="token builtin class-name">return</span> l2<span class="token punctuation">;</span>      if<span class="token punctuation">(</span>l2 <span class="token operator">==</span> NULL<span class="token punctuation">)</span> <span class="token builtin class-name">return</span> l1<span class="token punctuation">;</span>      if<span class="token punctuation">(</span>l1-<span class="token operator">></span>val <span class="token operator">&lt;=</span> l2-<span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>l1-<span class="token operator">></span>next <span class="token operator">=</span> mergeTwoLists<span class="token punctuation">(</span>l1-<span class="token operator">></span>next, l2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">return</span> l1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>l2-<span class="token operator">></span>next <span class="token operator">=</span> mergeTwoLists<span class="token punctuation">(</span>l1,l2-<span class="token operator">></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">return</span> l2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>//wiht <span class="token builtin class-name">help</span> and finish this <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> C++ || Easy To Understand || 2 Approaches || Recursive || Iterative<br> <a href="https://leetcode.com/problems/merge-two-sorted-lists/discuss/1826666/">KnockCat</a></p><h3 id="206-Reverse-Linked-List-need-reviwe"><a href="#206-Reverse-Linked-List-need-reviwe" class="headerlink" title="206. Reverse Linked List(need reviwe)"></a>206. Reverse Linked List(need reviwe)</h3><h4 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h4><p>restore preview node and the next node<br>change current node let first node-&gt;next &#x3D;&gt; pre node<br>then let pre node as current node<br>next node store current node -&gt; next<br>so let current node &#x3D;&gt; next node<br>judgy current node if Null;</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ListNode* reverseList<span class="token punctuation">(</span>ListNode* h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ListNode *pre_h , *next_h<span class="token punctuation">;</span>      pre_h <span class="token operator">=</span> NULL<span class="token punctuation">;</span>      //next_h <span class="token operator">=</span> h<span class="token punctuation">;</span>      while<span class="token punctuation">(</span>h <span class="token operator">!=</span>NULL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        next_h <span class="token operator">=</span> h-<span class="token operator">></span>next<span class="token punctuation">;</span>        h-<span class="token operator">></span>next <span class="token operator">=</span> pre_h<span class="token punctuation">;</span>        pre_h <span class="token operator">=</span> h<span class="token punctuation">;</span>        h <span class="token operator">=</span> next_h<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token builtin class-name">return</span> pre_h<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[C++] Iterative vs. Recursive Solutions Compared and Explained, ~99% Time, ~85% Space<br>Ajna</p><h3 id="876-Middle-of-the-Linked-List"><a href="#876-Middle-of-the-Linked-List" class="headerlink" title="876. Middle of the Linked List"></a>876. Middle of the Linked List</h3><p>If there are two middle nodes, return the second middle node.</p><h4 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h4><p>count list num , *h copy a head , mid find the node;</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ListNode* middleNode<span class="token punctuation">(</span>ListNode* <span class="token function">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      int count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      ListNode *mid , *h<span class="token punctuation">;</span>      h <span class="token operator">=</span> <span class="token function">head</span><span class="token punctuation">;</span>      while<span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">head</span> <span class="token operator">=</span> head-<span class="token operator">></span>next<span class="token punctuation">;</span>        count ++<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      count <span class="token operator">=</span> count / <span class="token number">2</span> + <span class="token number">1</span><span class="token punctuation">;</span>      while<span class="token punctuation">(</span>count--<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        mid <span class="token operator">=</span> h<span class="token punctuation">;</span>        h <span class="token operator">=</span> h-<span class="token operator">></span>next<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token builtin class-name">return</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>better solution</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ListNode* middleNode<span class="token punctuation">(</span>ListNode* <span class="token function">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode *slow <span class="token operator">=</span> head, *fast <span class="token operator">=</span> <span class="token function">head</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast-<span class="token operator">></span>next<span class="token punctuation">)</span>            slow <span class="token operator">=</span> slow-<span class="token operator">></span>next, fast <span class="token operator">=</span> fast-<span class="token operator">></span>next-<span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Each time, slow go 1 steps while fast go 2 steps.<br>When fast arrives at the end, slow will arrive right in the middle.<br>lee215</p><h3 id="142-Linked-List-Cycle-II"><a href="#142-Linked-List-Cycle-II" class="headerlink" title="142. Linked List Cycle II"></a>142. Linked List Cycle II</h3><p>Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.</p><h4 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h4><p>O(n^2) not a good solution maybe easy to understand.<br>detectCycle checkout the pre node and a copy of head node.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ListNode *detectCycle<span class="token punctuation">(</span>ListNode *head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ListNode *pre , *copy<span class="token punctuation">;</span>      pre <span class="token operator">=</span> copy <span class="token operator">=</span> <span class="token function">head</span> <span class="token punctuation">;</span>      if<span class="token punctuation">(</span>head <span class="token operator">==</span> NULL <span class="token operator">||</span> head-<span class="token operator">></span>next <span class="token operator">==</span> NULL<span class="token punctuation">)</span>        <span class="token builtin class-name">return</span> NULL<span class="token punctuation">;</span>            while<span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        if<span class="token punctuation">(</span>copy <span class="token operator">==</span> copy-<span class="token operator">></span>next<span class="token punctuation">)</span> <span class="token builtin class-name">return</span> copy<span class="token punctuation">;</span>        copy <span class="token operator">=</span> copy-<span class="token operator">></span>next<span class="token punctuation">;</span>        if<span class="token punctuation">(</span>copy-<span class="token operator">></span>next <span class="token operator">==</span> NULL<span class="token punctuation">)</span> <span class="token builtin class-name">return</span> NULL<span class="token punctuation">;</span>        while<span class="token punctuation">(</span>pre <span class="token operator">!=</span> copy<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          //cout<span class="token operator">&lt;&lt;</span>pre-<span class="token operator">></span>val<span class="token operator">&lt;&lt;</span><span class="token string">"!="</span><span class="token operator">&lt;&lt;</span>copy-<span class="token operator">></span>val<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>          if<span class="token punctuation">(</span>pre <span class="token operator">==</span> copy-<span class="token operator">></span>next<span class="token punctuation">)</span> <span class="token builtin class-name">return</span> pre<span class="token punctuation">;</span>          pre <span class="token operator">=</span> pre-<span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                pre <span class="token operator">=</span> <span class="token function">head</span><span class="token punctuation">;</span>        //return detectCycle<span class="token punctuation">(</span>head-<span class="token operator">></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token builtin class-name">return</span> NULL<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>O(n) solution</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ListNode *detectCycle<span class="token punctuation">(</span>ListNode *head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> NULL <span class="token operator">||</span> head-<span class="token operator">></span>next <span class="token operator">==</span> NULL<span class="token punctuation">)</span>        <span class="token builtin class-name">return</span> NULL<span class="token punctuation">;</span>        ListNode *slow  <span class="token operator">=</span> <span class="token function">head</span><span class="token punctuation">;</span>    ListNode *fast  <span class="token operator">=</span> <span class="token function">head</span><span class="token punctuation">;</span>    ListNode *entry <span class="token operator">=</span> <span class="token function">head</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast-<span class="token operator">></span>next <span class="token operator">&amp;&amp;</span> fast-<span class="token operator">></span>next-<span class="token operator">></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        slow <span class="token operator">=</span> slow-<span class="token operator">></span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast-<span class="token operator">></span>next-<span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      // there is a cycle            while<span class="token punctuation">(</span>slow <span class="token operator">!=</span> entry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               // found the entry location                slow  <span class="token operator">=</span> slow-<span class="token operator">></span>next<span class="token punctuation">;</span>                entry <span class="token operator">=</span> entry-<span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token builtin class-name">return</span> entry<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token builtin class-name">return</span> NULL<span class="token punctuation">;</span>                                 // there has no cycle<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Concise O(n) solution by using C++ with Detailed Alogrithm Description<br>ngcl</p><h3 id="121-Best-Time-to-Buy-and-Sell-Stock"><a href="#121-Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="121. Best Time to Buy and Sell Stock"></a>121. Best Time to Buy and Sell Stock</h3><p>You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.</p><p>Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.</p><h4 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h4><p>time limit</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/*<span class="token punctuation">[</span><span class="token number">7,1</span>,5,3,6,4<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9,0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7,6</span>,4,3,1<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1101,1102</span>,1111<span class="token punctuation">]</span>int maxProfit<span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>int<span class="token operator">>&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      int n <span class="token operator">=</span> prices.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      int profit <span class="token operator">=</span> <span class="token number">0</span> , max , min <span class="token punctuation">;</span>      max <span class="token operator">=</span> min <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      //int index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      if<span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n - <span class="token number">1</span> <span class="token punctuation">;</span> i ++<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        for<span class="token punctuation">(</span>int j <span class="token operator">=</span> i + <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> j ++<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          if<span class="token punctuation">(</span>profit <span class="token operator">&lt;</span> prices<span class="token punctuation">[</span>j<span class="token punctuation">]</span> - prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            profit <span class="token operator">=</span> prices<span class="token punctuation">[</span>j<span class="token punctuation">]</span> - prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token builtin class-name">return</span> profit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>let min is the smalliest numbers ,then checkout max prices after min<br>every time we will choose the smalliest and the  after min’s bigest number</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int maxProfit<span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>int<span class="token operator">>&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      int n <span class="token operator">=</span> prices.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      int profit <span class="token operator">=</span> <span class="token number">0</span> , max , min <span class="token punctuation">;</span>      min <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      max <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            if<span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i ++<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        if<span class="token punctuation">(</span>min <span class="token operator">></span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          min <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> if<span class="token punctuation">(</span>max <span class="token operator">&lt;</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> max <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        //cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>max - min<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        if<span class="token punctuation">(</span>profit <span class="token operator">&lt;</span> <span class="token punctuation">(</span>max - min<span class="token punctuation">))</span><span class="token punctuation">&#123;</span>            profit <span class="token operator">=</span> max - min<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        if<span class="token punctuation">(</span>i + <span class="token number">1</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> max <span class="token operator">=</span> prices<span class="token punctuation">[</span>i+1<span class="token punctuation">]</span><span class="token punctuation">;</span>        //cout<span class="token operator">&lt;&lt;</span><span class="token string">" min "</span><span class="token operator">&lt;&lt;</span>min<span class="token operator">&lt;&lt;</span><span class="token string">" max "</span><span class="token operator">&lt;&lt;</span>max<span class="token operator">&lt;&lt;</span><span class="token string">" profit "</span><span class="token operator">&lt;&lt;</span>profit<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token builtin class-name">return</span> profit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>    int lsf <span class="token operator">=</span> Integer.MAX_VALUE<span class="token punctuation">;</span> // least so far    int <span class="token function">op</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> // overall profit    int pist <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> // profit <span class="token keyword">if</span> sold today            for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        if<span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> lsf<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> // <span class="token keyword">if</span> we found new buy value <span class="token function">which</span> is <span class="token function">more</span> smaller <span class="token keyword">then</span> previous one            lsf <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> // update our least so far        <span class="token punctuation">&#125;</span>        pist <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> - lsf<span class="token punctuation">;</span> // calculating profit <span class="token keyword">if</span> sold today by, Buy - sell        if<span class="token punctuation">(</span>op <span class="token operator">&lt;</span> pist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> // <span class="token keyword">if</span> pist is <span class="token function">more</span> <span class="token keyword">then</span> our previous overall profit            <span class="token function">op</span> <span class="token operator">=</span> pist<span class="token punctuation">;</span> // update overall profit        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token builtin class-name">return</span> <span class="token function">op</span><span class="token punctuation">;</span> // <span class="token builtin class-name">return</span> <span class="token function">op</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="409-Longest-Palindrome"><a href="#409-Longest-Palindrome" class="headerlink" title="409. Longest Palindrome"></a>409. Longest Palindrome</h3><p>longest palindrome</p><h4 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h4><p>map[256]<br>as a math problems count a-z A-Z while the count &gt; 2 palindrome length + 2 after we count , we need calculat if is have a single number ,if we have one , len should + 1 as middle char</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int longestPalindrome<span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      int len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      int map<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s.length<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        //cout<span class="token operator">&lt;&lt;</span><span class="token string">" s[i] "</span><span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" map[s[i]] "</span><span class="token operator">&lt;&lt;</span>map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        //cout<span class="token operator">&lt;&lt;</span><span class="token string">" s[i] "</span><span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" map[s[i]] "</span><span class="token operator">&lt;&lt;</span>map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        if<span class="token punctuation">(</span>map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> % <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> len <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span> <span class="token punctuation">;</span> i ++<span class="token punctuation">)</span>        if<span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span> % <span class="token number">2</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> len + <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token builtin class-name">return</span> len<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      // for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">;</span> i ++<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      //   len <span class="token operator">+=</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span> / <span class="token number">2</span> * <span class="token number">2</span><span class="token punctuation">;</span>      //   cout<span class="token operator">&lt;&lt;</span><span class="token string">" map[s[i]] "</span><span class="token operator">&lt;&lt;</span>map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      // <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="589-N-ary-Tree-Preorder-Traversal"><a href="#589-N-ary-Tree-Preorder-Traversal" class="headerlink" title="589. N-ary Tree Preorder Traversal"></a>589. N-ary Tree Preorder Traversal</h3><p>Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value</p><h4 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/*// Definition <span class="token keyword">for</span> a Node.class Node <span class="token punctuation">&#123;</span>public:    int val<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>Node*<span class="token operator">></span> children<span class="token punctuation">;</span>    <span class="token function-name function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    Node<span class="token punctuation">(</span>int _val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        val <span class="token operator">=</span> _val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Node<span class="token punctuation">(</span>int _val, vector<span class="token operator">&lt;</span>Node*<span class="token operator">></span> _children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        val <span class="token operator">=</span> _val<span class="token punctuation">;</span>        children <span class="token operator">=</span> _children<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>*/class Solution <span class="token punctuation">&#123;</span>public:    vector<span class="token operator">&lt;</span>int<span class="token operator">></span> preorder<span class="token punctuation">(</span>Node* root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      vector<span class="token operator">&lt;</span>int<span class="token operator">></span> result<span class="token punctuation">;</span>      if<span class="token punctuation">(</span>root <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token builtin class-name">return</span> result<span class="token punctuation">;</span>      stack<span class="token operator">&lt;</span>Node *<span class="token operator">></span> s<span class="token punctuation">;</span>      s.push<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>      Node * cur<span class="token punctuation">;</span>      while<span class="token punctuation">(</span><span class="token operator">!</span>s.empty<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">&#123;</span>        cur <span class="token operator">=</span> s.top<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result.push_back<span class="token punctuation">(</span>cur-<span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        s.pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        for<span class="token punctuation">(</span>int i <span class="token operator">=</span> cur-<span class="token operator">></span>children.size<span class="token punctuation">(</span><span class="token punctuation">)</span> - <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i --<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          if<span class="token punctuation">(</span>cur-<span class="token operator">></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nullptr <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            s.push<span class="token punctuation">(</span>cur-<span class="token operator">></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token builtin class-name">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>stack function , using vector ,<br>MrQuin :<br>From the code we use a stack to simulate the process:<br>we push 1 to the stack.<br>we pop 1 out, add 1 into result; Add the children of 1 into stack. The value in the stack will be 3, 2 and 2 at the top position;<br>we pop 2 out and add it to result; Then we add children of 2 into stack. So the stack will be like 3, 5, 4 and with 4 at the top.<br>we pop 4 and 5 out of stack since they are leaf node. Currently result will be like 1, 2, 4, 5.<br>we pop 3 out and add its children into stack. The stack is like 7, 6 with 6 at the top.<br>we pop 6 and 7 out and the stack becomes empty.<br>So the final result will be 1, 2, 4, 5, 3, 6, 7</p><h3 id="102-Binary-Tree-Level-Order-Traversal"><a href="#102-Binary-Tree-Level-Order-Traversal" class="headerlink" title="102. Binary Tree Level Order Traversal"></a>102. Binary Tree Level Order Traversal</h3><p>Given the root of a binary tree, return the level order traversal of its nodes’ values. (i.e., from left to right, level by level).</p><h4 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>int<span class="token operator">>></span> levelOrder<span class="token punctuation">(</span>TreeNode *root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>int<span class="token operator">>></span> result<span class="token punctuation">;</span>      if<span class="token punctuation">(</span>root <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token builtin class-name">return</span> result<span class="token punctuation">;</span>            TreeNode *cur<span class="token punctuation">;</span>      queue<span class="token operator">&lt;</span>TreeNode *<span class="token operator">></span> que<span class="token punctuation">;</span>      que.push<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>      while<span class="token punctuation">(</span><span class="token operator">!</span>que.empty<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>int<span class="token operator">></span> value<span class="token punctuation">;</span>                for<span class="token punctuation">(</span>int i <span class="token operator">=</span> que.size<span class="token punctuation">(</span><span class="token punctuation">)</span> - <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i --<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          cur <span class="token operator">=</span> que.front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          que.pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          if<span class="token punctuation">(</span>cur-<span class="token operator">></span>left<span class="token punctuation">)</span> que.push<span class="token punctuation">(</span>cur-<span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>          if<span class="token punctuation">(</span>cur-<span class="token operator">></span>right<span class="token punctuation">)</span> que.push<span class="token punctuation">(</span>cur-<span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>          value.push_back<span class="token punctuation">(</span>cur-<span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        result.push_back<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>            <span class="token builtin class-name">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>checkout </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">class Solution <span class="token punctuation">&#123;</span>public:    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>int<span class="token operator">>></span> levelOrder<span class="token punctuation">(</span>TreeNode* root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>int<span class="token operator">>></span>arr<span class="token punctuation">;</span>        if<span class="token punctuation">(</span>root<span class="token operator">==</span>nullptr<span class="token punctuation">)</span>return arr<span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>TreeNode*<span class="token operator">></span>q<span class="token punctuation">;</span>        q.push<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        while<span class="token punctuation">(</span><span class="token operator">!</span>q.empty<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">&#123;</span>            vector<span class="token operator">&lt;</span>int<span class="token operator">></span>ans<span class="token punctuation">;</span>            int <span class="token assign-left variable">n</span><span class="token operator">=</span>q.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                TreeNode*cur<span class="token operator">=</span>q.front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q.pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                if<span class="token punctuation">(</span>cur-<span class="token operator">></span>left<span class="token punctuation">)</span>q.push<span class="token punctuation">(</span>cur-<span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                                if<span class="token punctuation">(</span>cur-<span class="token operator">></span>right<span class="token punctuation">)</span>q.push<span class="token punctuation">(</span>cur-<span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                                ans.push_back<span class="token punctuation">(</span>cur-<span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            arr.push_back<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token builtin class-name">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>leetcode discuss Conquistador17<br>###</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><h4 id="-4"><a href="#-4" class="headerlink" title=""></a></h4><h3 id="-5"><a href="#-5" class="headerlink" title=""></a></h3><h4 id="-6"><a href="#-6" class="headerlink" title=""></a></h4><h3 id="-7"><a href="#-7" class="headerlink" title=""></a></h3><h4 id="-8"><a href="#-8" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> syntactic sugar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaMavenProject</title>
      <link href="/2022/09/29/JavaMavenProject/"/>
      <url>/2022/09/29/JavaMavenProject/</url>
      
        <content type="html"><![CDATA[<h2 id="Enviroment"><a href="#Enviroment" class="headerlink" title="Enviroment"></a>Enviroment</h2><p>set up java and maven (use command line)<br>attention kit tool version<br>setup java : java jdk , java se<br>java development kit , java standard edition<br>java -version </p><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn clean compilemvn clean <span class="token builtin class-name">test</span>mvn clean packagemvn clean <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>atention maven plugin may cause problem<br>cheek <a href="https://maven.apache.org/plugins/maven-shade-plugin/">https://maven.apache.org/plugins/maven-shade-plugin/</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>build<span class="token operator">></span>    <span class="token operator">&lt;</span>plugins<span class="token operator">></span>      <span class="token operator">&lt;</span>plugin<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.apache.maven.plugins<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>maven-shade-plugin<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.3</span>.<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/version<span class="token operator">></span>        <span class="token operator">&lt;</span>configuration<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">!</span>-- put your configurations here --<span class="token operator">></span>        <span class="token operator">&lt;</span>/configuration<span class="token operator">></span>        <span class="token operator">&lt;</span>executions<span class="token operator">></span>          <span class="token operator">&lt;</span>execution<span class="token operator">></span>            <span class="token operator">&lt;</span>phase<span class="token operator">></span>package<span class="token operator">&lt;</span>/phase<span class="token operator">></span>            <span class="token operator">&lt;</span>goals<span class="token operator">></span>              <span class="token operator">&lt;</span>goal<span class="token operator">></span>shade<span class="token operator">&lt;</span>/goal<span class="token operator">></span>            <span class="token operator">&lt;</span>/goals<span class="token operator">></span>          <span class="token operator">&lt;</span>/execution<span class="token operator">></span>        <span class="token operator">&lt;</span>/executions<span class="token operator">></span>      <span class="token operator">&lt;</span>/plugin<span class="token operator">></span>    <span class="token operator">&lt;</span>/plugins<span class="token operator">></span><span class="token operator">&lt;</span>/build<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://maven.apache.org/plugins/maven-shade-plugin/">https://maven.apache.org/plugins/maven-shade-plugin/</a></p><p><a href="https://maven.apache.org/run.html">https://maven.apache.org/run.html</a></p><p><a href="https://maven.apache.org/run-maven/index.html">https://maven.apache.org/run-maven/index.html</a></p><p><a href="https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html">https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html</a><br>###</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Bavk End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> development </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCodeDay3</title>
      <link href="/2022/09/29/LeetCodeDay3/"/>
      <url>/2022/09/29/LeetCodeDay3/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Largest-Perimeter-Triangle"><a href="#Largest-Perimeter-Triangle" class="headerlink" title="Largest Perimeter Triangle"></a>Largest Perimeter Triangle</h3><p>store the 1st largest number<br>store the 2st largest number<br>store the 3st largest number<br>how to ?</p><p>wrong thinking , need take care of all the numbers ! not only the largest three numbers !<br>so , sort them and start from end</p><p>Try to get a triangle with 3 biggest numbers.<br>If A[n-1] &lt; A[n-2] + A[n-3], we get a triangle.<br>If A[n-1] &gt;&#x3D; A[n-2] + A[n-3] &gt;&#x3D; A[i] + A[j], we cannot get any triangle with A[n-1]<br>repeat step2 and step3 with the left numbers.</p><p>check if it is a triangle : a &gt;&#x3D; b &gt;&#x3D; c, a,b,c can form a triangle if a &lt; b + c. (math)</p><p>return</p><h3 id="Soloution"><a href="#Soloution" class="headerlink" title="Soloution"></a>Soloution</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int largestPerimeter<span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>int<span class="token operator">>&amp;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sort<span class="token punctuation">(</span> n.begin<span class="token punctuation">(</span><span class="token punctuation">)</span> , n.end<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> int i <span class="token operator">=</span> n.size<span class="token punctuation">(</span><span class="token punctuation">)</span> - <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">;</span> i-- <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>// i <span class="token operator">></span> <span class="token number">1</span> because n<span class="token punctuation">[</span>i-2<span class="token punctuation">]</span> <span class="token number">3</span> number            <span class="token keyword">if</span> <span class="token punctuation">(</span> n<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> n <span class="token punctuation">[</span>i-1<span class="token punctuation">]</span> + n<span class="token punctuation">[</span>i-2<span class="token punctuation">]</span> <span class="token punctuation">)</span>                <span class="token builtin class-name">return</span> n<span class="token punctuation">[</span>i<span class="token punctuation">]</span> + n <span class="token punctuation">[</span>i-1<span class="token punctuation">]</span> + n<span class="token punctuation">[</span>i-2<span class="token punctuation">]</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token builtin class-name">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Find-Nearest-Point-That-Has-the-Same-X-or-Y-Coordinate"><a href="#Find-Nearest-Point-That-Has-the-Same-X-or-Y-Coordinate" class="headerlink" title="Find Nearest Point That Has the Same X or Y Coordinate"></a>Find Nearest Point That Has the Same X or Y Coordinate</h3><p>Return the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return -1.</p><p>The Manhattan distance between two points (x1, y1) and (x2, y2) is abs(x1 - x2) + abs(y1 - y2).</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int nearestValidPoint<span class="token punctuation">(</span>int x, int y, vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>int<span class="token operator">>></span><span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    int min <span class="token operator">=</span> <span class="token parameter variable">-1</span> , index <span class="token operator">=</span> <span class="token parameter variable">-1</span> <span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> int i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p.size<span class="token punctuation">(</span><span class="token punctuation">)</span>-1 <span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> x <span class="token operator">||</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> x <span class="token operator">||</span>             p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> y <span class="token operator">||</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> y            <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            if<span class="token punctuation">(</span>min <span class="token operator">==</span> <span class="token parameter variable">-1</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                min <span class="token operator">=</span> abs<span class="token punctuation">(</span>x - p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> + abs<span class="token punctuation">(</span> y - p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">\</span>                index <span class="token operator">=</span> i <span class="token punctuation">;</span>                <span class="token builtin class-name">continue</span> <span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            if<span class="token punctuation">(</span> min <span class="token operator">></span> abs<span class="token punctuation">(</span>x - p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> + abs<span class="token punctuation">(</span> y - p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                //min <span class="token operator">=</span> abs<span class="token punctuation">(</span>x - p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> + abs<span class="token punctuation">(</span> y - p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>                index <span class="token operator">=</span> i <span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token builtin class-name">return</span> index <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3<br>4<br>[[1,2],[3,1],[2,4],[2,3],[4,4]]</p><p>3<br>4<br>[[2,3]]</p><p>can’t sove this example<br>need cosider the case : Same X or Y Coordinate</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">class Solution <span class="token punctuation">&#123;</span>public:    int nearestValidPoint<span class="token punctuation">(</span>int x, int y, vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>int<span class="token operator">>></span><span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        int min <span class="token operator">=</span> <span class="token parameter variable">-1</span> , index <span class="token operator">=</span> <span class="token parameter variable">-1</span> <span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> int i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p.size<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i ++ <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> x <span class="token operator">||</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                if<span class="token punctuation">(</span>min <span class="token operator">==</span> <span class="token parameter variable">-1</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    min <span class="token operator">=</span> abs<span class="token punctuation">(</span>x - p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> + abs<span class="token punctuation">(</span> y - p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">\</span>                    index <span class="token operator">=</span> i <span class="token punctuation">;</span>                    <span class="token builtin class-name">continue</span> <span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                if<span class="token punctuation">(</span> min <span class="token operator">></span> abs<span class="token punctuation">(</span>x - p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> + abs<span class="token punctuation">(</span> y - p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    min <span class="token operator">=</span> abs<span class="token punctuation">(</span>x - p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> + abs<span class="token punctuation">(</span> y - p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>                    index <span class="token operator">=</span> i <span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token builtin class-name">return</span> index <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> syntactic sugar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCodeDay2</title>
      <link href="/2022/09/29/LeetCodeDay2/"/>
      <url>/2022/09/29/LeetCodeDay2/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Number-of-1-Bits"><a href="#Number-of-1-Bits" class="headerlink" title="Number of 1 Bits"></a>Number of 1 Bits</h3><p>uint32_t: unsigned int</p><p><a href="https://en.wikipedia.org/wiki/Hamming_weight">https://en.wikipedia.org/wiki/Hamming_weight</a></p><p>need use operator &amp; ^ ( or not ? )</p><p>1001<br>1000</p><p>1000</p><p>0111</p><p>0000</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int hammingWeight<span class="token punctuation">(</span>uint32_t n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        //uint32_t s <span class="token operator">=</span> 0xffffffff <span class="token punctuation">;</span> //<span class="token punctuation">(</span> n <span class="token operator">&amp;</span> s <span class="token punctuation">)</span> + <span class="token punctuation">(</span> n <span class="token operator">>></span> s <span class="token punctuation">)</span>         int count <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> n <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            n <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token punctuation">(</span> n - <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>            count++ <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token builtin class-name">return</span> count <span class="token punctuation">;</span>        //return n ? <span class="token number">1</span> + hammingWeight<span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n - <span class="token number">1</span><span class="token punctuation">))</span> <span class="token builtin class-name">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>//n <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token punctuation">(</span> n - <span class="token number">1</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>O(1)<br>n &amp; (n - 1) drops the lowest set bit. It’s a neat little bit trick.</p><p>Let’s use n &#x3D; 00101100 as an example. This binary representation has three 1s.</p><p>If n &#x3D; 00101100, then n - 1 &#x3D; 00101011, so n &amp; (n - 1) &#x3D; 00101100 &amp; 00101011 &#x3D; 00101000. Count &#x3D; 1.</p><p>If n &#x3D; 00101000, then n - 1 &#x3D; 00100111, so n &amp; (n - 1) &#x3D; 00101000 &amp; 00100111 &#x3D; 00100000. Count &#x3D; 2.</p><p>If n &#x3D; 00100000, then n - 1 &#x3D; 00011111, so n &amp; (n - 1) &#x3D; 00100000 &amp; 00011111 &#x3D; 00000000. Count &#x3D; 3.</p><p>n is now zero, so the while loop ends, and the final count (the numbers of set bits) is returned.</p><p>from(<a href="https://leetcode.com/problems/number-of-1-bits/discuss/55255/C%2B%2B-Solution%3A-n-and-(n-1)">https://leetcode.com/problems/number-of-1-bits/discuss/55255/C%2B%2B-Solution%3A-n-and-(n-1)</a>)</p><h3 id="Subtract-the-Product-and-Sum-of-Digits-of-an-Integer"><a href="#Subtract-the-Product-and-Sum-of-Digits-of-an-Integer" class="headerlink" title="Subtract the Product and Sum of Digits of an Integer"></a>Subtract the Product and Sum of Digits of an Integer</h3><p>% can get value(last)<br>&#x2F; can get value(first)</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int subtractProductAndSum<span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        int <span class="token function">sum</span> , prod <span class="token punctuation">;</span>        <span class="token function">sum</span> <span class="token operator">=</span> n % <span class="token number">10</span> <span class="token punctuation">;</span>        prod <span class="token operator">=</span> n % <span class="token number">10</span> <span class="token punctuation">;</span>        n /<span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">sum</span> <span class="token operator">+=</span> n % <span class="token number">10</span> <span class="token punctuation">;</span>            prod *<span class="token operator">=</span> n % <span class="token number">10</span> <span class="token punctuation">;</span>            n /<span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token builtin class-name">return</span> prod - <span class="token function">sum</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> syntactic sugar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCodeDay1</title>
      <link href="/2022/09/29/LeetCodeDay1/"/>
      <url>/2022/09/29/LeetCodeDay1/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Count-Odd-Numbers-in-an-Interval-Range"><a href="#Count-Odd-Numbers-in-an-Interval-Range" class="headerlink" title="Count Odd Numbers in an Interval Range"></a>Count Odd Numbers in an Interval Range</h3><p>odd even | odd odd | even even | even Odd</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int countOdds<span class="token punctuation">(</span>int low, int high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        int i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> low <span class="token operator">&lt;=</span> high <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            if<span class="token punctuation">(</span> low % <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> low <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                i++<span class="token punctuation">;</span>                <span class="token assign-left variable">low</span><span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            else<span class="token punctuation">&#123;</span>                <span class="token assign-left variable">low</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token builtin class-name">return</span> i<span class="token punctuation">;</span> // Time Limit Exceeded    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Changes:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int countOdds<span class="token punctuation">(</span>int low, int high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        if<span class="token punctuation">(</span> low % <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> low <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            low -<span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        if<span class="token punctuation">(</span> high % <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> high <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            high <span class="token operator">+=</span> <span class="token number">1</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token builtin class-name">return</span> <span class="token punctuation">(</span> high - low <span class="token punctuation">)</span> / <span class="token number">2</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>//Accepted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>best answer:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int countOdds<span class="token punctuation">(</span>int low, int high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">return</span> <span class="token punctuation">(</span>high + <span class="token number">1</span><span class="token punctuation">)</span> / <span class="token number">2</span> - low / <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Average-Salary-Excluding-the-Minimum-and-Maximum-Salary"><a href="#Average-Salary-Excluding-the-Minimum-and-Maximum-Salary" class="headerlink" title="Average Salary Excluding the Minimum and Maximum Salary"></a>Average Salary Excluding the Minimum and Maximum Salary</h3><p>salary.size();</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">class Solution <span class="token punctuation">&#123;</span>public:    double average<span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>int<span class="token operator">>&amp;</span> salary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        int max , min <span class="token punctuation">;</span>        double <span class="token function">sum</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>        max <span class="token operator">=</span> min <span class="token operator">=</span> salary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        for<span class="token punctuation">(</span> int i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> salary.size<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i++ <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> salary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                max <span class="token operator">=</span> salary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> min <span class="token operator">></span> salary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                min <span class="token operator">=</span> salary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">sum</span> <span class="token operator">+=</span> salary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token builtin class-name">return</span> <span class="token punctuation">(</span> <span class="token function">sum</span> - max - min <span class="token punctuation">)</span> / <span class="token punctuation">(</span>salary.size<span class="token punctuation">(</span><span class="token punctuation">)</span> - <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> syntactic sugar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FullStackOpen_Part2</title>
      <link href="/2022/09/29/FullStackOpen-Part2/"/>
      <url>/2022/09/29/FullStackOpen-Part2/</url>
      
        <content type="html"><![CDATA[<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>map key value</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>ul<span class="token operator">></span>  <span class="token punctuation">&#123;</span>notes.map<span class="token punctuation">((</span>note, i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li <span class="token assign-left variable">key</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span><span class="token operator">></span>      <span class="token punctuation">&#123;</span>note.content<span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span>/li<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>/ul<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Front End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> nodejs </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FullStackOpen_Part1</title>
      <link href="/2022/09/29/FullStackOpen-Part1/"/>
      <url>/2022/09/29/FullStackOpen-Part1/</url>
      
        <content type="html"><![CDATA[<h2 id="Start-React-Leaning"><a href="#Start-React-Leaning" class="headerlink" title="Start React Leaning"></a>Start React Leaning</h2><p>app created with react</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx create-react-app part1<span class="token builtin class-name">cd</span> part1<span class="token function">npm</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>Arrow functions and functions defined using the function keyword vary substantially when it comes to how they behave with respect to the keyword this, which refers to the object itself.</p><p>Component state, event handlers</p><p>A more complex state, debugging React apps<br>debugging React apps with React DevTools - important and useful</p><p>There are a few ways to define functions in JavaScript. Here we will use arrow functions, which are described in a newer version of JavaScript known as ECMAScript 6, also called ES6.<br>JSX<br>[The 1st rule of web development: Always keep the Developer Console open on your web browser.]</p><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>Exercises 1.6.-1.14<br>unicafe : I’m not skillful enough to write code . javascript random function .<br>anecdotes : erro about define an arrary . stackoverflow help me fixed it :</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">const <span class="token punctuation">[</span>score, setScore<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token punctuation">(</span>new Array<span class="token punctuation">(</span>max+1<span class="token punctuation">)</span>.join<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>.split<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>.map<span class="token punctuation">(</span>parseFloat<span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3>]]></content>
      
      
      <categories>
          
          <category> Front End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> nodejs </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FullStackOpen_Part0</title>
      <link href="/2022/09/29/FullStackOpen-Part0/"/>
      <url>/2022/09/29/FullStackOpen-Part0/</url>
      
        <content type="html"><![CDATA[<h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>It’s about how to start with nodejs , java-script , introduce a base react app<br>First thing is learning how to setup enviroment.<br>Familiar with project structure</p><p>[The 1st rule of web development: Always keep the Developer Console open on your web browser.]</p><h3 id="Learning"><a href="#Learning" class="headerlink" title="Learning"></a>Learning</h3><p>ajax<br>Read &amp;&amp; create a Single page app<br>Exercises 0.1.-0.6.<br>useing online tool <a href="https://www.websequencediagrams.com/">https://www.websequencediagrams.com/</a><br>create a diagram depicting the situation where the user goes to the single page app -&gt; <a href="https://studies.cs.helsinki.fi/exampleapp/spa">https://studies.cs.helsinki.fi/exampleapp/spa</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Front End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> nodejs </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog Create</title>
      <link href="/2022/09/29/Blog-Create/"/>
      <url>/2022/09/29/Blog-Create/</url>
      
        <content type="html"><![CDATA[<p>There have nothing .</p>]]></content>
      
      
      <categories>
          
          <category> Start </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog create time </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Blog Hei!</title>
      <link href="/2022/09/28/hello-world/"/>
      <url>/2022/09/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.this blog use matery theme <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">github</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>tags &amp;&amp; categories in article to write</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tags: <span class="token punctuation">[</span>xxx , xxx , xxx<span class="token punctuation">]</span> <span class="token operator">||</span><span class="token punctuation">(</span>or<span class="token punctuation">)</span> <span class="token parameter variable">-xxx</span><span class="token parameter variable">-xxx</span><span class="token parameter variable">-xxx</span>categories: <span class="token punctuation">[</span>xxx<span class="token punctuation">]</span> <span class="token punctuation">[</span>xxx<span class="token punctuation">]</span> <span class="token punctuation">[</span>xxx<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generateor$ hexo clean <span class="token operator">&amp;&amp;</span> hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deployor$ hexo clean <span class="token operator">&amp;&amp;</span> hexo generate <span class="token operator">&amp;&amp;</span> hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
